ACC: 93

    tf.keras.layers.Dense(200, activation="relu"),
    tf.keras.layers.Dropout(0.1),

    tf.keras.layers.Dense(200, activation="relu"),
    tf.keras.layers.Dropout(0.1),

ACC: 95 butdropped to 93.6

tf.keras.layers.Dense(500, activation="relu"),
    tf.keras.layers.Dropout(0.2),



    tf.keras.layers.Dense(300, activation="relu"),
    tf.keras.layers.Dropout(0.2),


Acc: 94,75


        # Convolutional layer. Learn 32 filters using a 3x3 kernel
        tf.keras.layers.Conv2D(
            48, (3, 3), activation="relu", input_shape=(IMG_WIDTH, IMG_HEIGHT, 3)
        ),

        # Max-pooling layer, using 2x2 pool size
        tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

        # Flatten units
        tf.keras.layers.Flatten(),

        # Add a hidden layer with dropout
        tf.keras.layers.Dense(500, activation="relu"),
        tf.keras.layers.Dropout(0.2),



        tf.keras.layers.Dense(300, activation="relu"),
        tf.keras.layers.Dropout(0.2),



        tf.keras.layers.Dense(NUM_CATEGORIES, activation="softmax")

  Best acc :97

  # Convolutional layer. Learn 32 filters using a 3x3 kernel
      tf.keras.layers.Conv2D(
          48, (3, 3), activation="relu", input_shape=(IMG_WIDTH, IMG_HEIGHT, 3)
      ),

      tf.keras.layers.Conv2D(
          48, (3, 3), activation="relu", input_shape=(IMG_WIDTH, IMG_HEIGHT, 3)
      ),

      # Max-pooling layer, using 2x2 pool size
      tf.keras.layers.MaxPooling2D(pool_size=(2, 2)),

      # Flatten units
      tf.keras.layers.Flatten(),

      # Add a hidden layer with dropout
      tf.keras.layers.Dense(500, activation="relu"),
      tf.keras.layers.Dropout(0.2),



      tf.keras.layers.Dense(300, activation="relu"),
      tf.keras.layers.Dropout(0.2),



      tf.keras.layers.Dense(NUM_CATEGORIES, activation="softmax")
